SYMBOL SECTION
 ENTRY b CONST INTERNAL GLOBAL six  <INT>
 ENTRY d CONST INTERNAL GLOBAL seven  <INT>
 ENTRY e INTERNAL GLOBAL answer  <INT>
 ENTRY f INTERNAL PARAM a gcd 0 <INT>
 ENTRY g INTERNAL PARAM b gcd 1 <INT>
 ENTRY h INTERNAL RETURN gcd <INT>
 ENTRY k EXTERNAL PARAM WriteString 0 <STRING>
 ENTRY l EXTERNAL PARAM WriteInt 0 <INT>
 ENTRY m EXTERNAL PARAM Multiply 0 <INT>
 ENTRY n EXTERNAL PARAM Multiply 1 <INT>
 ENTRY o EXTERNAL RETURN Multiply <INT>
 ENTRY t EXTERNAL PARAM IntToReal 0 <INT>
 ENTRY u EXTERNAL RETURN IntToReal <REAL>
 ENTRY w EXTERNAL PARAM RMul 0 <REAL>
 ENTRY x EXTERNAL PARAM RMul 1 <REAL>
 ENTRY y EXTERNAL RETURN RMul <REAL>
 ENTRY A EXTERNAL PARAM WriteReal 0 <REAL>
DATA SECTION
 DEF a := 6 <INT>
 DEF GLOBAL b := a <INT>
 DEF c := 7 <INT>
 DEF GLOBAL d := c <INT>
BSS SECTION
 DEF GLOBAL e := 0 <INT>
CODE SECTION
 CALL gcd([(GLOBAL b) -> f]<INT>, [(GLOBAL d) -> g]<INT>) FROM CODE SECTION
 DEF i := (RETURN h) <INT>
 GLOBAL e := i <INT>
 DEF j := "Answer is " <STRING>
 CALL WriteString([j -> k]<STRING>) FROM DEF j := "Answer is " <STRING>
 CALL WriteInt([(GLOBAL e) -> l]<INT>) FROM CALL WriteString([j -> k]<STRING>) FROM DEF j := "Answer is " <STRING>
 CALL WriteLn() FROM CALL WriteInt([(GLOBAL e) -> l]<INT>) FROM CALL WriteString([j -> k]<STRING>) FROM DEF j := "Answer is " <STRING>
 CALL WriteInt([(GLOBAL b) -> l]<INT>) FROM CALL WriteLn() FROM CALL WriteInt([(GLOBAL e) -> l]<INT>) FROM CALL WriteString([j -> k]<STRING>) FROM DEF j := "Answer is " <STRING>
 CALL WriteInt([(GLOBAL d) -> l]<INT>) FROM CALL WriteInt([(GLOBAL b) -> l]<INT>) FROM CALL WriteLn() FROM CALL WriteInt([(GLOBAL e) -> l]<INT>) FROM CALL WriteString([j -> k]<STRING>) FROM DEF j := "Answer is " <STRING>
 CALL WriteInt([(GLOBAL e) -> l]<INT>) FROM CALL WriteInt([(GLOBAL d) -> l]<INT>) FROM CALL WriteInt([(GLOBAL b) -> l]<INT>) FROM CALL WriteLn() FROM CALL WriteInt([(GLOBAL e) -> l]<INT>) FROM CALL WriteString([j -> k]<STRING>) FROM DEF j := "Answer is " <STRING>
 CALL Multiply([(GLOBAL b) -> m]<INT>, [(GLOBAL d) -> n]<INT>) FROM CALL WriteInt([(GLOBAL e) -> l]<INT>) FROM CALL WriteInt([(GLOBAL d) -> l]<INT>) FROM CALL WriteInt([(GLOBAL b) -> l]<INT>) FROM CALL WriteLn() FROM CALL WriteInt([(GLOBAL e) -> l]<INT>) FROM CALL WriteString([j -> k]<STRING>) FROM DEF j := "Answer is " <STRING>
 DEF p := (RETURN o) <INT>
 CALL Multiply([p -> m]<INT>, [(GLOBAL e) -> n]<INT>) FROM DEF p := (RETURN o) <INT>
 DEF q := (RETURN o) <INT>
 GLOBAL e := q <INT>
 DEF r := "Answer is " <STRING>
 CALL WriteString([r -> k]<STRING>) FROM DEF r := "Answer is " <STRING>
 CALL WriteInt([(GLOBAL e) -> l]<INT>) FROM CALL WriteString([r -> k]<STRING>) FROM DEF r := "Answer is " <STRING>
 DEF s := 1.0 <REAL>
 CALL IntToReal([(GLOBAL e) -> t]<INT>) FROM DEF s := 1.0 <REAL>
 DEF v := (RETURN u) <REAL>
 CALL RMul([v -> w]<REAL>, [s -> x]<REAL>) FROM DEF v := (RETURN u) <REAL>
 DEF z := (RETURN y) <REAL>
 CALL WriteReal([z -> A]<REAL>) FROM DEF z := (RETURN y) <REAL>
 CALL WriteLn() FROM CALL WriteReal([z -> A]<REAL>) FROM DEF z := (RETURN y) <REAL>
END
PROC SECTION
 PROC LABEL gcd
  DEF B := (PARAM f) INE (PARAM g) <BOOL>
  DEF C := TRUE <BOOL>
  IF B BEQ C
  THEN WHILESTAT_0_SEQ_0_LEVEL_0
  ELSE WHILENEXT_0_SEQ_0_LEVEL_0
  LABEL WHILECOND_0_SEQ_0_LEVEL_0
  IF B BEQ C
  THEN WHILESTAT_0_SEQ_0_LEVEL_0
  ELSE WHILEEND_0_LEVEL_0
  LABEL WHILESTAT_0_SEQ_0_LEVEL_0
  DEF D := (PARAM f) GT (PARAM g) <BOOL>
  DEF E := TRUE <BOOL>
  IF D BEQ E
  THEN IFSTAT_0_SEQ_0_LEVEL_0
  ELSE IFNEXT_0_SEQ_0_LEVEL_0
  LABEL IFSTAT_0_SEQ_0_LEVEL_0
  DEF F := (PARAM f) ISUB (PARAM g) <INT>
  PARAM f := F <INT>
  GOTO IFEND_0_LEVEL_0 FROM PARAM f := F <INT>
  LABEL IFNEXT_0_SEQ_0_LEVEL_0
  DEF G := (PARAM g) ISUB (PARAM f) <INT>
  PARAM g := G <INT>
  GOTO IFEND_0_LEVEL_0 FROM PARAM g := G <INT>
  LABEL IFNEXT_0_SEQ_1_LEVEL_0
  LABEL IFEND_0_LEVEL_0
  DEF H := (PARAM f) INE (PARAM g) <BOOL>
  B := H <BOOL>
  GOTO WHILECOND_0_SEQ_0_LEVEL_0 FROM B := H <BOOL>
  LABEL WHILENEXT_0_SEQ_0_LEVEL_0
  LABEL WHILEEND_0_LEVEL_0
  DEF RETURN h := (PARAM f) <INT>
 RETURN FROM gcd
