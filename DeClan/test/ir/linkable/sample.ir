SYMBOL SECTION
 ENTRY b CONST INTERNAL six
 ENTRY d CONST INTERNAL seven
 ENTRY e INTERNAL answer
 ENTRY k EXTERNAL PARAM WriteString 0
 ENTRY l EXTERNAL PARAM WriteInt 0
 ENTRY q EXTERNAL PARAM IntToReal 0
 ENTRY r EXTERNAL RETURN IntToReal
 ENTRY t EXTERNAL PARAM RMul 0
 ENTRY u EXTERNAL PARAM RMul 1
 ENTRY v EXTERNAL RETURN RMul
 ENTRY x EXTERNAL PARAM WriteReal 0
 ENTRY f INTERNAL PARAM gcd 0
 ENTRY g INTERNAL PARAM gcd 1
 ENTRY h INTERNAL RETURN gcd
DATA SECTION
 DEF a := 6 <INT>
 DEF GLOBAL b := a <INT>
 DEF c := 7 <INT>
 DEF GLOBAL d := c <INT>
BSS SECTION
 DEF GLOBAL e := 0 <INT>
CODE SECTION
 CALL gcd([(GLOBAL b) -> f]<INT>, [(GLOBAL d) -> g]<INT>)
 DEF i := (RETURN h) <INT>
 GLOBAL e := i <INT>
 DEF j := "Answer is " <STRING>
 CALL WriteString([j -> k]<STRING>)
 CALL WriteInt([(GLOBAL e) -> l]<INT>)
 CALL WriteLn()
 CALL WriteInt([(GLOBAL b) -> l]<INT>)
 CALL WriteInt([(GLOBAL d) -> l]<INT>)
 CALL WriteInt([(GLOBAL e) -> l]<INT>)
 DEF m := (GLOBAL b) IMUL (GLOBAL d) <INT>
 DEF n := m IMUL (GLOBAL e) <INT>
 GLOBAL e := n <INT>
 DEF o := "Answer is " <STRING>
 CALL WriteString([o -> k]<STRING>)
 CALL WriteInt([(GLOBAL e) -> l]<INT>)
 DEF p := 1.0 <REAL>
 CALL IntToReal([(GLOBAL e) -> q]<INT>)
 DEF s := (RETURN r) <REAL>
 CALL RMul([s -> t]<REAL>, [p -> u]<REAL>)
 DEF w := (RETURN v) <REAL>
 CALL WriteReal([w -> x]<REAL>)
 CALL WriteLn()
END
PROC SECTION
 PROC LABEL gcd
  DEF y := (PARAM f) NE (PARAM g) <BOOL>
  DEF z := TRUE <BOOL>
  IF y EQ z
  THEN WHILESTAT_0_SEQ_0_LEVEL_0
  ELSE WHILENEXT_0_SEQ_0_LEVEL_0
  LABEL WHILECOND_0_SEQ_0_LEVEL_0
  IF y EQ z
  THEN WHILESTAT_0_SEQ_0_LEVEL_0
  ELSE WHILEEND_0_LEVEL_0
  LABEL WHILESTAT_0_SEQ_0_LEVEL_0
  DEF A := (PARAM f) GT (PARAM g) <BOOL>
  DEF B := TRUE <BOOL>
  IF A EQ B
  THEN IFSTAT_0_SEQ_0_LEVEL_0
  ELSE IFNEXT_0_SEQ_0_LEVEL_0
  LABEL IFSTAT_0_SEQ_0_LEVEL_0
  DEF C := (PARAM f) ISUB (PARAM g) <INT>
  PARAM f := C <INT>
  GOTO IFEND_0_LEVEL_0
  LABEL IFNEXT_0_SEQ_0_LEVEL_0
  DEF D := (PARAM g) ISUB (PARAM f) <INT>
  PARAM g := D <INT>
  GOTO IFEND_0_LEVEL_0
  LABEL IFNEXT_0_SEQ_1_LEVEL_0
  LABEL IFEND_0_LEVEL_0
  DEF E := (PARAM f) NE (PARAM g) <BOOL>
  y := E <BOOL>
  GOTO WHILECOND_0_SEQ_0_LEVEL_0
  LABEL WHILENEXT_0_SEQ_0_LEVEL_0
  LABEL WHILEEND_0_LEVEL_0
  DEF RETURN h := (PARAM f) <INT>
 RETURN
