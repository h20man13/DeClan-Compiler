SYMBOL SECTION
 ENTRY b CONST INTERNAL a
 ENTRY d CONST INTERNAL b
 ENTRY f EXTERNAL PARAM RNeg 0
 ENTRY g EXTERNAL RETURN RNeg
 ENTRY i EXTERNAL PARAM IntToReal 0
 ENTRY j EXTERNAL RETURN IntToReal
 ENTRY l EXTERNAL PARAM RAdd 0
 ENTRY m EXTERNAL PARAM RAdd 1
 ENTRY n EXTERNAL RETURN RAdd
 ENTRY p CONST INTERNAL c
 ENTRY v CONST INTERNAL d
 ENTRY x EXTERNAL PARAM RMul 0
 ENTRY y EXTERNAL PARAM RMul 1
 ENTRY z EXTERNAL RETURN RMul
 ENTRY C EXTERNAL PARAM RDivide 0
 ENTRY D EXTERNAL PARAM RDivide 1
 ENTRY E EXTERNAL RETURN RDivide
 ENTRY G EXTERNAL PARAM RNotEqualTo 0
 ENTRY H EXTERNAL PARAM RNotEqualTo 1
 ENTRY I EXTERNAL RETURN RNotEqualTo
 ENTRY K CONST INTERNAL e
 ENTRY L INTERNAL x
 ENTRY M INTERNAL y
 ENTRY N INTERNAL z
 ENTRY O INTERNAL l
 ENTRY P INTERNAL m
 ENTRY Q INTERNAL n
 ENTRY R INTERNAL p
 ENTRY S INTERNAL q
 ENTRY T INTERNAL r
 ENTRY a0 EXTERNAL PARAM RSub 0
 ENTRY a1 EXTERNAL PARAM RSub 1
 ENTRY a2 EXTERNAL RETURN RSub
 ENTRY a4 EXTERNAL PARAM WriteInt 0
 ENTRY a5 EXTERNAL PARAM WriteReal 0
 ENTRY a6 EXTERNAL PARAM Div 0
 ENTRY a7 EXTERNAL PARAM Div 1
 ENTRY a8 EXTERNAL RETURN Div
 ENTRY b0 EXTERNAL PARAM Divide 0
 ENTRY b1 EXTERNAL PARAM Divide 1
 ENTRY b2 EXTERNAL RETURN Divide
 ENTRY b4 EXTERNAL PARAM Round 0
 ENTRY b5 EXTERNAL RETURN Round
 ENTRY c6 EXTERNAL PARAM RGreaterThan 0
 ENTRY c7 EXTERNAL PARAM RGreaterThan 1
 ENTRY c8 EXTERNAL RETURN RGreaterThan
 ENTRY d3 EXTERNAL PARAM RGreaterThanOrEqualTo 0
 ENTRY d4 EXTERNAL PARAM RGreaterThanOrEqualTo 1
 ENTRY d5 EXTERNAL RETURN RGreaterThanOrEqualTo
 ENTRY e0 EXTERNAL PARAM WriteString 0
 ENTRY e1 EXTERNAL PARAM WriteBool 0
DATA SECTION
 DEF a := 0 [INT]
 DEF GLOBAL b := a [INT]
 DEF c := 1.2 [REAL]
 DEF GLOBAL d := c [REAL]
 DEF e := 3.14 [REAL]
 CALL RNeg((e -> f)[REAL])
 DEF h := (RETURN g) [REAL]
 CALL IntToReal(((GLOBAL b) -> i)[INT])
 DEF k := (RETURN j) [REAL]
 CALL RAdd((h -> l)[REAL], (k -> m)[REAL])
 DEF o := (RETURN n) [REAL]
 DEF GLOBAL p := o [REAL]
 DEF q := 6 [INT]
 DEF r := 6 [INT]
 DEF s := 1 [INT]
 DEF t := r IADD s [INT]
 DEF u := q IMUL t [INT]
 DEF GLOBAL v := u [INT]
 CALL IntToReal(((GLOBAL b) -> i)[INT])
 DEF w := (RETURN j) [REAL]
 CALL RMul((w -> x)[REAL], ((GLOBAL d) -> y)[REAL])
 DEF A := (RETURN z) [REAL]
 CALL IntToReal(((GLOBAL v) -> i)[INT])
 DEF B := (RETURN j) [REAL]
 CALL RDivide(((GLOBAL p) -> C)[REAL], (B -> D)[REAL])
 DEF F := (RETURN E) [REAL]
 CALL RNotEqualTo((A -> G)[REAL], (F -> H)[REAL])
 DEF J := (RETURN I) [BOOL]
 DEF GLOBAL K := J [BOOL]
BSS SECTION
 DEF GLOBAL L := 0.0 [REAL]
 DEF GLOBAL M := 0.0 [REAL]
 DEF GLOBAL N := 0.0 [REAL]
 DEF GLOBAL O := 0 [INT]
 DEF GLOBAL P := 0 [INT]
 DEF GLOBAL Q := 0 [INT]
 DEF GLOBAL R := FALSE [BOOL]
 DEF GLOBAL S := FALSE [BOOL]
 DEF GLOBAL T := FALSE [BOOL]
CODE SECTION
 CALL RDivide(((GLOBAL d) -> C)[REAL], ((GLOBAL d) -> D)[REAL])
 DEF U := (RETURN E) [REAL]
 GLOBAL L := U [REAL]
 DEF V := 10 [INT]
 DEF W := (GLOBAL v) IMOD V [INT]
 GLOBAL O := W [INT]
 CALL RNeg(((GLOBAL p) -> f)[REAL])
 DEF X := (RETURN g) [REAL]
 CALL IntToReal(((GLOBAL b) -> i)[INT])
 DEF Y := (RETURN j) [REAL]
 CALL RMul(((GLOBAL d) -> x)[REAL], (Y -> y)[REAL])
 DEF Z := (RETURN z) [REAL]
 CALL RSub((X -> a0)[REAL], (Z -> a1)[REAL])
 DEF a3 := (RETURN a2) [REAL]
 GLOBAL M := a3 [REAL]
 CALL WriteInt(((GLOBAL b) -> a4)[INT])
 CALL WriteReal(((GLOBAL L) -> a5)[REAL])
 CALL WriteReal(((GLOBAL L) -> a5)[REAL])
 CALL WriteReal(((GLOBAL M) -> a5)[REAL])
 CALL WriteLn()
 CALL Div(((GLOBAL v) -> a6)[INT], ((GLOBAL O) -> a7)[INT])
 DEF a9 := (RETURN a8) [INT]
 GLOBAL P := a9 [INT]
 CALL Divide(((GLOBAL v) -> b0)[INT], ((GLOBAL O) -> b1)[INT])
 DEF b3 := (RETURN b2) [REAL]
 GLOBAL N := b3 [REAL]
 CALL WriteInt(((GLOBAL P) -> a4)[INT])
 CALL WriteReal(((GLOBAL N) -> a5)[REAL])
 CALL WriteLn()
 CALL Round(((GLOBAL p) -> b4)[REAL])
 DEF b6 := (RETURN b5) [INT]
 CALL IntToReal((b6 -> i)[INT])
 DEF b7 := (RETURN j) [REAL]
 GLOBAL N := b7 [REAL]
 CALL WriteReal(((GLOBAL N) -> a5)[REAL])
 DEF b8 := TRUE [BOOL]
 IF (GLOBAL K) EQ b8
 THEN IFSTAT_0_SEQ_0_LEVEL_0
 ELSE IFNEXT_0_SEQ_0_LEVEL_0
 LABEL IFSTAT_0_SEQ_0_LEVEL_0
 DEF b9 := 2 [INT]
 DEF c0 := 2 [INT]
 DEF c1 := b9 IMUL c0 [INT]
 CALL WriteInt((c1 -> a4)[INT])
 GOTO IFEND_0_LEVEL_0
 LABEL IFNEXT_0_SEQ_0_LEVEL_0
 DEF c2 := 10 [INT]
 CALL Divide(((GLOBAL v) -> b0)[INT], (c2 -> b1)[INT])
 DEF c3 := (RETURN b2) [REAL]
 CALL WriteReal((c3 -> a5)[REAL])
 GOTO IFEND_0_LEVEL_0
 LABEL IFNEXT_0_SEQ_1_LEVEL_0
 LABEL IFEND_0_LEVEL_0
 CALL WriteLn()
 DEF c4 := BNOT (GLOBAL K) [BOOL]
 CALL IntToReal(((GLOBAL b) -> i)[INT])
 DEF c5 := (RETURN j) [REAL]
 CALL RGreaterThan(((GLOBAL L) -> c6)[REAL], (c5 -> c7)[REAL])
 DEF c9 := (RETURN c8) [BOOL]
 DEF d0 := c4 LAND c9 [BOOL]
 GLOBAL R := d0 [BOOL]
 DEF d1 := BNOT (GLOBAL K) [BOOL]
 CALL IntToReal(((GLOBAL b) -> i)[INT])
 DEF d2 := (RETURN j) [REAL]
 CALL RGreaterThanOrEqualTo(((GLOBAL L) -> d3)[REAL], (d2 -> d4)[REAL])
 DEF d6 := (RETURN d5) [BOOL]
 DEF d7 := d1 LOR d6 [BOOL]
 GLOBAL S := d7 [BOOL]
 DEF d8 := (GLOBAL R) EQ (GLOBAL S) [BOOL]
 GLOBAL T := d8 [BOOL]
 DEF d9 := "Q is " [STRING]
 CALL WriteString((d9 -> e0)[STRING])
 CALL WriteBool(((GLOBAL S) -> e1)[BOOL])
 CALL WriteLn()
 DEF e2 := TRUE [BOOL]
 IF (GLOBAL R) EQ e2
 THEN IFSTAT_1_SEQ_0_LEVEL_0
 ELSE IFNEXT_1_SEQ_0_LEVEL_0
 LABEL IFSTAT_1_SEQ_0_LEVEL_0
 DEF e3 := 4 [INT]
 CALL WriteInt((e3 -> a4)[INT])
 GOTO IFEND_1_LEVEL_0
 LABEL IFNEXT_1_SEQ_0_LEVEL_0
 DEF e4 := TRUE [BOOL]
 IF (GLOBAL S) EQ e4
 THEN IFSTAT_1_SEQ_1_LEVEL_0
 ELSE IFNEXT_1_SEQ_1_LEVEL_0
 LABEL IFSTAT_1_SEQ_1_LEVEL_0
 DEF e5 := 5 [INT]
 CALL WriteInt((e5 -> a4)[INT])
 GOTO IFEND_1_LEVEL_0
 LABEL IFNEXT_1_SEQ_1_LEVEL_0
 LABEL IFEND_1_LEVEL_0
 DEF e6 := TRUE [BOOL]
 IF (GLOBAL T) EQ e6
 THEN IFSTAT_2_SEQ_0_LEVEL_0
 ELSE IFNEXT_2_SEQ_0_LEVEL_0
 LABEL IFSTAT_2_SEQ_0_LEVEL_0
 DEF e7 := 5 [INT]
 CALL WriteInt((e7 -> a4)[INT])
 GOTO IFEND_2_LEVEL_0
 LABEL IFNEXT_2_SEQ_0_LEVEL_0
 DEF e8 := 6 [INT]
 CALL WriteInt((e8 -> a4)[INT])
 GOTO IFEND_2_LEVEL_0
 LABEL IFNEXT_2_SEQ_1_LEVEL_0
 LABEL IFEND_2_LEVEL_0
 CALL WriteLn()
END
PROC SECTION
