SYMBOL SECTION
 b CONST INTERNAL a
 d CONST INTERNAL b
 f EXTERNAL PARAM RNeg 0
 g EXTERNAL RETURN RNeg
 i EXTERNAL PARAM IntToReal 0
 j EXTERNAL RETURN IntToReal
 l EXTERNAL PARAM RAdd 0
 m EXTERNAL PARAM RAdd 1
 n EXTERNAL RETURN RAdd
 p CONST INTERNAL c
 v CONST INTERNAL d
 x EXTERNAL PARAM RMul 0
 y EXTERNAL PARAM RMul 1
 z EXTERNAL RETURN RMul
 C EXTERNAL PARAM RDivide 0
 D EXTERNAL PARAM RDivide 1
 E EXTERNAL RETURN RDivide
 G EXTERNAL PARAM RNotEqualTo 0
 H EXTERNAL PARAM RNotEqualTo 1
 I EXTERNAL RETURN RNotEqualTo
 K CONST INTERNAL e
 L INTERNAL x
 M INTERNAL y
 N INTERNAL z
 O INTERNAL l
 P INTERNAL m
 Q INTERNAL n
 R INTERNAL p
 S INTERNAL q
 T INTERNAL r
 W EXTERNAL PARAM Mod 0
 X EXTERNAL PARAM Mod 1
 Y EXTERNAL RETURN Mod
 a3 EXTERNAL PARAM RSub 0
 a4 EXTERNAL PARAM RSub 1
 a5 EXTERNAL RETURN RSub
 a7 EXTERNAL PARAM WriteInt 0
 a8 EXTERNAL PARAM WriteReal 0
 a9 EXTERNAL PARAM Div 0
 b0 EXTERNAL PARAM Div 1
 b1 EXTERNAL RETURN Div
 b3 EXTERNAL PARAM Divide 0
 b4 EXTERNAL PARAM Divide 1
 b5 EXTERNAL RETURN Divide
 b7 EXTERNAL PARAM Round 0
 b8 EXTERNAL RETURN Round
 c8 EXTERNAL PARAM RGreaterThan 0
 c9 EXTERNAL PARAM RGreaterThan 1
 d0 EXTERNAL RETURN RGreaterThan
 d5 EXTERNAL PARAM RGreaterThanOrEqualTo 0
 d6 EXTERNAL PARAM RGreaterThanOrEqualTo 1
 d7 EXTERNAL RETURN RGreaterThanOrEqualTo
 e2 EXTERNAL PARAM WriteString 0
 e3 EXTERNAL PARAM WriteBool 0
DATA SECTION
 a := 0 [INT]
 GLOBAL b := a [INT]
 c := 1.2 [REAL]
 GLOBAL d := c [REAL]
 e := 3.14 [REAL]
 CALL RNeg((e -> f)[REAL])
 EXTERNAL RETURN h := g [REAL]
 CALL IntToReal((b -> i)[INT])
 EXTERNAL RETURN k := j [REAL]
 CALL RAdd((h -> l)[REAL], (k -> m)[REAL])
 EXTERNAL RETURN o := n [REAL]
 GLOBAL p := o [REAL]
 q := 6 [INT]
 r := 6 [INT]
 s := 1 [INT]
 t := r IADD s [INT]
 u := q IMUL t [INT]
 GLOBAL v := u [INT]
 CALL IntToReal((b -> i)[INT])
 EXTERNAL RETURN w := j [REAL]
 CALL RMul((w -> x)[REAL], (d -> y)[REAL])
 EXTERNAL RETURN A := z [REAL]
 CALL IntToReal((v -> i)[INT])
 EXTERNAL RETURN B := j [REAL]
 CALL RDivide((p -> C)[REAL], (B -> D)[REAL])
 EXTERNAL RETURN F := E [REAL]
 CALL RNotEqualTo((A -> G)[REAL], (F -> H)[REAL])
 EXTERNAL RETURN J := I [BOOL]
 GLOBAL K := J [BOOL]
 GLOBAL L := 0.0 [REAL]
 GLOBAL M := 0.0 [REAL]
 GLOBAL N := 0.0 [REAL]
 GLOBAL O := 0 [INT]
 GLOBAL P := 0 [INT]
 GLOBAL Q := 0 [INT]
 GLOBAL R := FALSE [BOOL]
 GLOBAL S := FALSE [BOOL]
 GLOBAL T := FALSE [BOOL]
CODE SECTION
 CALL RDivide((d -> C)[REAL], (d -> D)[REAL])
 EXTERNAL RETURN U := E [REAL]
 L := U [REAL]
 V := 10 [INT]
 CALL Mod((v -> W)[INT], (V -> X)[INT])
 EXTERNAL RETURN Z := Y [INT]
 O := Z [INT]
 CALL RNeg((p -> f)[REAL])
 EXTERNAL RETURN a0 := g [REAL]
 CALL IntToReal((b -> i)[INT])
 EXTERNAL RETURN a1 := j [REAL]
 CALL RMul((d -> x)[REAL], (a1 -> y)[REAL])
 EXTERNAL RETURN a2 := z [REAL]
 CALL RSub((a0 -> a3)[REAL], (a2 -> a4)[REAL])
 EXTERNAL RETURN a6 := a5 [REAL]
 M := a6 [REAL]
 CALL WriteInt((b -> a7)[INT])
 CALL WriteReal((L -> a8)[REAL])
 CALL WriteReal((L -> a8)[REAL])
 CALL WriteReal((M -> a8)[REAL])
 CALL WriteLn()
 CALL Div((v -> a9)[INT], (O -> b0)[INT])
 EXTERNAL RETURN b2 := b1 [INT]
 P := b2 [INT]
 CALL Divide((v -> b3)[INT], (O -> b4)[INT])
 EXTERNAL RETURN b6 := b5 [REAL]
 N := b6 [REAL]
 CALL WriteInt((P -> a7)[INT])
 CALL WriteReal((N -> a8)[REAL])
 CALL WriteLn()
 CALL Round((p -> b7)[REAL])
 EXTERNAL RETURN b9 := b8 [INT]
 CALL IntToReal((b9 -> i)[INT])
 EXTERNAL RETURN c0 := j [REAL]
 N := c0 [REAL]
 CALL WriteReal((N -> a8)[REAL])
 IF K EQ TRUE THEN IFSTAT_0_SEQ_0_LEVEL_0 ELSE IFNEXT_0_SEQ_0_LEVEL_0
 LABEL IFSTAT_0_SEQ_0_LEVEL_0
 c1 := 2 [INT]
 c2 := 2 [INT]
 c3 := c1 IMUL c2 [INT]
 CALL WriteInt((c3 -> a7)[INT])
 GOTO IFEND_0_LEVEL_0
 LABEL IFNEXT_0_SEQ_0_LEVEL_0
 c4 := 10 [INT]
 CALL Divide((v -> b3)[INT], (c4 -> b4)[INT])
 EXTERNAL RETURN c5 := b5 [REAL]
 CALL WriteReal((c5 -> a8)[REAL])
 GOTO IFEND_0_LEVEL_0
 LABEL IFNEXT_0_SEQ_1_LEVEL_0
 LABEL IFEND_0_LEVEL_0
 CALL WriteLn()
 c6 := BNOT K [BOOL]
 CALL IntToReal((b -> i)[INT])
 EXTERNAL RETURN c7 := j [REAL]
 CALL RGreaterThan((L -> c8)[REAL], (c7 -> c9)[REAL])
 EXTERNAL RETURN d1 := d0 [BOOL]
 d2 := c6 LAND d1 [BOOL]
 R := d2 [BOOL]
 d3 := BNOT K [BOOL]
 CALL IntToReal((b -> i)[INT])
 EXTERNAL RETURN d4 := j [REAL]
 CALL RGreaterThanOrEqualTo((L -> d5)[REAL], (d4 -> d6)[REAL])
 EXTERNAL RETURN d8 := d7 [BOOL]
 d9 := d3 LOR d8 [BOOL]
 S := d9 [BOOL]
 e0 := R EQ S [BOOL]
 T := e0 [BOOL]
 e1 := "Q is " [STRING]
 CALL WriteString((e1 -> e2)[STRING])
 CALL WriteBool((S -> e3)[BOOL])
 CALL WriteLn()
 IF R EQ TRUE THEN IFSTAT_1_SEQ_0_LEVEL_0 ELSE IFNEXT_1_SEQ_0_LEVEL_0
 LABEL IFSTAT_1_SEQ_0_LEVEL_0
 e4 := 4 [INT]
 CALL WriteInt((e4 -> a7)[INT])
 GOTO IFEND_1_LEVEL_0
 LABEL IFNEXT_1_SEQ_0_LEVEL_0
 IF S EQ TRUE THEN IFSTAT_1_SEQ_1_LEVEL_0 ELSE IFNEXT_1_SEQ_1_LEVEL_0
 LABEL IFSTAT_1_SEQ_1_LEVEL_0
 e5 := 5 [INT]
 CALL WriteInt((e5 -> a7)[INT])
 GOTO IFEND_1_LEVEL_0
 LABEL IFNEXT_1_SEQ_1_LEVEL_0
 LABEL IFEND_1_LEVEL_0
 IF T EQ TRUE THEN IFSTAT_2_SEQ_0_LEVEL_0 ELSE IFNEXT_2_SEQ_0_LEVEL_0
 LABEL IFSTAT_2_SEQ_0_LEVEL_0
 e6 := 5 [INT]
 CALL WriteInt((e6 -> a7)[INT])
 GOTO IFEND_2_LEVEL_0
 LABEL IFNEXT_2_SEQ_0_LEVEL_0
 e7 := 6 [INT]
 CALL WriteInt((e7 -> a7)[INT])
 GOTO IFEND_2_LEVEL_0
 LABEL IFNEXT_2_SEQ_1_LEVEL_0
 LABEL IFEND_2_LEVEL_0
 CALL WriteLn()
END
PROC SECTION
