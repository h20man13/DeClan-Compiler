SYMBOL SECTION
 b CONST INTERNAL a
 d CONST INTERNAL b
 i CONST INTERNAL c
 o CONST INTERNAL d
 u CONST INTERNAL e
 v INTERNAL x
 w INTERNAL y
 x INTERNAL z
 y INTERNAL l
 z INTERNAL m
 A INTERNAL n
 B INTERNAL p
 C INTERNAL q
 D INTERNAL r
DATA SECTION
 a := 0 [INT]
 GLOBAL b := a [INT]
 c := 1.2 [REAL]
 GLOBAL d := c [REAL]
 e := 3.14 [REAL]
 f := EXTERNAL CALL RNeg((e, [REAL])) [REAL]
 g := EXTERNAL CALL IntToReal((b, [INT])) [REAL]
 h := EXTERNAL CALL RAdd((f, [REAL]), (g, [REAL])) [REAL]
 GLOBAL i := h [REAL]
 j := 6 [INT]
 k := 6 [INT]
 l := 1 [INT]
 m := k IADD l [INT]
 n := j IMUL m [INT]
 GLOBAL o := n [INT]
 p := EXTERNAL CALL IntToReal((b, [INT])) [REAL]
 q := EXTERNAL CALL RMul((p, [REAL]), (d, [REAL])) [REAL]
 r := EXTERNAL CALL IntToReal((o, [INT])) [REAL]
 s := EXTERNAL CALL RDivide((i, [REAL]), (r, [REAL])) [REAL]
 t := EXTERNAL CALL RNotEqualTo((q, [REAL]), (s, [REAL])) [BOOL]
 GLOBAL u := t [BOOL]
 GLOBAL v := 0.0 [REAL]
 GLOBAL w := 0.0 [REAL]
 GLOBAL x := 0.0 [REAL]
 GLOBAL y := 0 [INT]
 GLOBAL z := 0 [INT]
 GLOBAL A := 0 [INT]
 GLOBAL B := FALSE [BOOL]
 GLOBAL C := FALSE [BOOL]
 GLOBAL D := FALSE [BOOL]
CODE SECTION
 E := EXTERNAL CALL RDivide((d, [REAL]), (d, [REAL])) [REAL]
 v := E [REAL]
 F := 10 [INT]
 G := EXTERNAL CALL Mod((o, [INT]), (F, [INT])) [INT]
 y := G [INT]
 H := EXTERNAL CALL RNeg((i, [REAL])) [REAL]
 I := EXTERNAL CALL IntToReal((b, [INT])) [REAL]
 J := EXTERNAL CALL RMul((d, [REAL]), (I, [REAL])) [REAL]
 K := EXTERNAL CALL RSub((H, [REAL]), (J, [REAL])) [REAL]
 w := K [REAL]
 EXTERNAL CALL WriteInt((b, [INT]))
 EXTERNAL CALL WriteReal((v, [REAL]))
 EXTERNAL CALL WriteReal((v, [REAL]))
 EXTERNAL CALL WriteReal((w, [REAL]))
 EXTERNAL CALL WriteLn()
 L := EXTERNAL CALL Div((o, [INT]), (y, [INT])) [INT]
 z := L [INT]
 M := EXTERNAL CALL Divide((o, [INT]), (y, [INT])) [REAL]
 x := M [REAL]
 EXTERNAL CALL WriteInt((z, [INT]))
 EXTERNAL CALL WriteReal((x, [REAL]))
 EXTERNAL CALL WriteLn()
 N := EXTERNAL CALL Round((i, [REAL])) [INT]
 x := N [INT]
 EXTERNAL CALL WriteReal((x, [REAL]))
 IF u EQ TRUE THEN IFSTAT_0_SEQ_0_LEVEL_0 ELSE IFNEXT_0_SEQ_0_LEVEL_0
 LABEL IFSTAT_0_SEQ_0_LEVEL_0
 O := 2 [INT]
 P := 2 [INT]
 Q := O IMUL P [INT]
 EXTERNAL CALL WriteInt((Q, [INT]))
 GOTO IFEND_0_LEVEL_0
 LABEL IFNEXT_0_SEQ_0_LEVEL_0
 R := 10 [INT]
 S := EXTERNAL CALL Divide((o, [INT]), (R, [INT])) [REAL]
 EXTERNAL CALL WriteReal((S, [REAL]))
 GOTO IFEND_0_LEVEL_0
 LABEL IFNEXT_0_SEQ_1_LEVEL_0
 LABEL IFEND_0_LEVEL_0
 EXTERNAL CALL WriteLn()
 T := BNOT u [BOOL]
 U := EXTERNAL CALL IntToReal((b, [INT])) [REAL]
 V := EXTERNAL CALL RGreaterThan((v, [REAL]), (U, [REAL])) [BOOL]
 W := T LAND V [BOOL]
 B := W [BOOL]
 X := BNOT u [BOOL]
 Y := EXTERNAL CALL IntToReal((b, [INT])) [REAL]
 Z := EXTERNAL CALL RGreaterThanOrEqualTo((v, [REAL]), (Y, [REAL])) [BOOL]
 a0 := X LOR Z [BOOL]
 C := a0 [BOOL]
 a1 := B EQ C [BOOL]
 D := a1 [BOOL]
 IF B EQ TRUE THEN IFSTAT_1_SEQ_0_LEVEL_0 ELSE IFNEXT_1_SEQ_0_LEVEL_0
 LABEL IFSTAT_1_SEQ_0_LEVEL_0
 a2 := 4 [INT]
 EXTERNAL CALL WriteInt((a2, [INT]))
 GOTO IFEND_1_LEVEL_0
 LABEL IFNEXT_1_SEQ_0_LEVEL_0
 IF C EQ TRUE THEN IFSTAT_1_SEQ_1_LEVEL_0 ELSE IFNEXT_1_SEQ_1_LEVEL_0
 LABEL IFSTAT_1_SEQ_1_LEVEL_0
 a3 := 5 [INT]
 EXTERNAL CALL WriteInt((a3, [INT]))
 GOTO IFEND_1_LEVEL_0
 LABEL IFNEXT_1_SEQ_1_LEVEL_0
 LABEL IFEND_1_LEVEL_0
 IF D EQ TRUE THEN IFSTAT_2_SEQ_0_LEVEL_0 ELSE IFNEXT_2_SEQ_0_LEVEL_0
 LABEL IFSTAT_2_SEQ_0_LEVEL_0
 a4 := 5 [INT]
 EXTERNAL CALL WriteInt((a4, [INT]))
 GOTO IFEND_2_LEVEL_0
 LABEL IFNEXT_2_SEQ_0_LEVEL_0
 a5 := 6 [INT]
 EXTERNAL CALL WriteInt((a5, [INT]))
 GOTO IFEND_2_LEVEL_0
 LABEL IFNEXT_2_SEQ_1_LEVEL_0
 LABEL IFEND_2_LEVEL_0
 EXTERNAL CALL WriteLn()
END
PROC SECTION
