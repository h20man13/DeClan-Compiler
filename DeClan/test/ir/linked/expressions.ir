SYMBOL SECTION
 ENTRY j72 CONST INTERNAL realBias
DATA SECTION
 DEF f23 := 0 [INT]
 DEF GLOBAL f24 := f23 [INT]
 DEF f25 := 1.2 [REAL]
 DEF GLOBAL f26 := f25 [REAL]
 DEF f27 := 3.14 [REAL]
 CALL RNeg((f27 -> j96)[REAL])
 CALL IntToReal(((GLOBAL f24) -> l74)[INT])
 DEF g52 := (RETURN l75) [REAL]
 CALL RAdd((f38 -> k80)[REAL], (g52 -> k81)[REAL])
 DEF i48 := (RETURN i49) [REAL]
 DEF GLOBAL i50 := i48 [REAL]
 DEF i51 := 6 [INT]
 DEF i52 := 6 [INT]
 DEF i53 := 1 [INT]
 DEF i54 := i52 IADD i53 [INT]
 DEF i55 := i51 IMUL i54 [INT]
 DEF GLOBAL i56 := i55 [INT]
 CALL IntToReal(((GLOBAL f24) -> l74)[INT])
 DEF i58 := (RETURN l75) [REAL]
 CALL RMul((i58 -> k12)[REAL], ((GLOBAL f26) -> k13)[REAL])
 DEF i85 := (RETURN k15) [REAL]
 CALL IntToReal(((GLOBAL i56) -> l74)[INT])
 DEF i88 := (RETURN l75) [REAL]
 CALL RDivide(((GLOBAL i50) -> k43)[REAL], (i88 -> k44)[REAL])
 DEF j77 := (RETURN j91) [REAL]
 CALL RNotEqualTo((i85 -> j84)[REAL], (j77 -> j85)[REAL])
 DEF j86 := (RETURN j87) [BOOL]
 DEF GLOBAL j88 := j86 [BOOL]
 DEF f38 := (RETURN j98) [REAL]
 DEF g35 := 127 [INT]
 DEF GLOBAL j72 := g35 [INT]
BSS SECTION
CODE SECTION
 CALL RDivide(((GLOBAL f26) -> k43)[REAL], ((GLOBAL f26) -> k44)[REAL])
 DEF U := (RETURN j91) [REAL]
 j92 := U [REAL]
 DEF j93 := 10 [INT]
 DEF j94 := (GLOBAL i56) IMOD j93 [INT]
 j95 := j94 [INT]
 CALL RNeg(((GLOBAL i50) -> j96)[REAL])
 DEF j97 := (RETURN j98) [REAL]
 CALL IntToReal(((GLOBAL f24) -> l74)[INT])
 DEF k10 := (RETURN l75) [REAL]
 CALL RMul(((GLOBAL f26) -> k12)[REAL], (k10 -> k13)[REAL])
 DEF k14 := (RETURN k15) [REAL]
 CALL RSub((j97 -> k76)[REAL], (k14 -> k77)[REAL])
 DEF k22 := (RETURN k23) [REAL]
 k24 := k22 [REAL]
 CALL WriteInt(((GLOBAL f24) -> m30)[INT])
 CALL WriteReal(((GLOBAL j92) -> l30)[REAL])
 CALL WriteReal(((GLOBAL j92) -> l30)[REAL])
 CALL WriteReal(((GLOBAL k24) -> l30)[REAL])
 CALL WriteLn()
 CALL Div(((GLOBAL i56) -> k31)[INT], ((GLOBAL j95) -> k32)[INT])
 DEF k33 := (RETURN k34) [INT]
 k35 := k33 [INT]
 CALL Divide(((GLOBAL i56) -> l26)[INT], ((GLOBAL j95) -> l27)[INT])
 DEF k49 := (RETURN l29) [REAL]
 k51 := k49 [REAL]
 CALL WriteInt(((GLOBAL k35) -> m30)[INT])
 CALL WriteReal(((GLOBAL k51) -> l30)[REAL])
 CALL WriteLn()
 CALL Round(((GLOBAL i50) -> l13)[REAL])
 DEF l14 := (RETURN l15) [INT]
 CALL IntToReal((l14 -> l74)[INT])
 DEF l17 := (RETURN l75) [REAL]
 k51 := l17 [REAL]
 CALL WriteReal(((GLOBAL k51) -> l30)[REAL])
 DEF l20 := TRUE [BOOL]
 IF (GLOBAL j88) EQ l20
 THEN IFSTAT_0_SEQ_0_LEVEL_0
 ELSE IFNEXT_0_SEQ_0_LEVEL_0
 LABEL IFSTAT_0_SEQ_0_LEVEL_0
 DEF l21 := 2 [INT]
 DEF l22 := 2 [INT]
 DEF l23 := l21 IMUL l22 [INT]
 CALL WriteInt((l23 -> m30)[INT])
 GOTO IFEND_0_LEVEL_0
 LABEL IFNEXT_0_SEQ_0_LEVEL_0
 DEF l25 := 10 [INT]
 CALL Divide(((GLOBAL i56) -> l26)[INT], (l25 -> l27)[INT])
 DEF l28 := (RETURN l29) [REAL]
 CALL WriteReal((l28 -> l30)[REAL])
 GOTO IFEND_0_LEVEL_0
 LABEL IFNEXT_0_SEQ_1_LEVEL_0
 LABEL IFEND_0_LEVEL_0
 CALL WriteLn()
 DEF l31 := BNOT (GLOBAL j88) [BOOL]
 CALL IntToReal(((GLOBAL f24) -> l74)[INT])
 DEF l33 := (RETURN l75) [REAL]
 CALL RGreaterThan(((GLOBAL j92) -> l67)[REAL], (l33 -> l68)[REAL])
 DEF l69 := (RETURN l70) [BOOL]
 DEF l71 := l31 LAND l69 [BOOL]
 l72 := l71 [BOOL]
 DEF l73 := BNOT (GLOBAL j88) [BOOL]
 CALL IntToReal(((GLOBAL f24) -> l74)[INT])
 DEF d2 := (RETURN l75) [REAL]
 CALL RGreaterThanOrEqualTo(((GLOBAL j92) -> l91)[REAL], (d2 -> l92)[REAL])
 DEF d6 := (RETURN l93) [BOOL]
 DEF d7 := l73 LOR d6 [BOOL]
 l94 := d7 [BOOL]
 DEF d8 := (GLOBAL l72) EQ (GLOBAL l94) [BOOL]
 T := d8 [BOOL]
 DEF d9 := "Q is " [STRING]
 CALL WriteString((d9 -> m22)[STRING])
 CALL WriteBool(((GLOBAL l94) -> m24)[BOOL])
 CALL WriteLn()
 DEF e2 := TRUE [BOOL]
 IF (GLOBAL l72) EQ e2
 THEN IFSTAT_1_SEQ_0_LEVEL_0_3
 ELSE IFNEXT_1_SEQ_0_LEVEL_0_3
 LABEL IFSTAT_1_SEQ_0_LEVEL_0_3
 DEF e3 := 4 [INT]
 CALL WriteInt((e3 -> m30)[INT])
 GOTO IFEND_1_LEVEL_0_3
 LABEL IFNEXT_1_SEQ_0_LEVEL_0_3
 DEF m26 := TRUE [BOOL]
 IF (GLOBAL l94) EQ m26
 THEN IFSTAT_1_SEQ_1_LEVEL_0
 ELSE IFNEXT_1_SEQ_1_LEVEL_0
 LABEL IFSTAT_1_SEQ_1_LEVEL_0
 DEF e5 := 5 [INT]
 CALL WriteInt((e5 -> m30)[INT])
 GOTO IFEND_1_LEVEL_0_3
 LABEL IFNEXT_1_SEQ_1_LEVEL_0
 LABEL IFEND_1_LEVEL_0_3
 DEF e6 := TRUE [BOOL]
 IF (GLOBAL T) EQ e6
 THEN IFSTAT_2_SEQ_0_LEVEL_0_1
 ELSE IFNEXT_2_SEQ_0_LEVEL_0_1
 LABEL IFSTAT_2_SEQ_0_LEVEL_0_1
 DEF e7 := 5 [INT]
 CALL WriteInt((e7 -> m30)[INT])
 GOTO IFEND_2_LEVEL_0_1
 LABEL IFNEXT_2_SEQ_0_LEVEL_0_1
 DEF m29 := 6 [INT]
 CALL WriteInt((m29 -> m30)[INT])
 GOTO IFEND_2_LEVEL_0_1
 LABEL IFNEXT_2_SEQ_1_LEVEL_0_1
 LABEL IFEND_2_LEVEL_0_1
 CALL WriteLn()
END
PROC SECTION
 PROC LABEL RNeg
 RETURN
 PROC LABEL RealBinaryAsInt
 RETURN
 PROC LABEL IntBinaryAsReal
 RETURN
 PROC LABEL IntToReal
 RETURN
 PROC LABEL Abs
 RETURN
 PROC LABEL INeg
 RETURN
 PROC LABEL IntIsNegative
 RETURN
 PROC LABEL IntIsZero_0
 RETURN
 PROC LABEL RAdd
 RETURN
 PROC LABEL RealSign
 RETURN
 PROC LABEL RealExponent
 RETURN
 PROC LABEL RealMantissa
 RETURN
 PROC LABEL RealIsZero
 RETURN
 PROC LABEL IntIsZero_0
  PROC LABEL RMul
 RETURN
 PROC LABEL RDivide
 RETURN
 PROC LABEL Div
 RETURN
 PROC LABEL RNotEqualTo
 RETURN
 PROC LABEL RSub
 RETURN
 PROC LABEL WriteInt
 RETURN
 PROC LABEL WriteReal
 RETURN
 PROC LABEL WriteLn
 RETURN
 PROC LABEL Divide
 RETURN
 PROC LABEL Round_0
 RETURN
 PROC LABEL RealIsNegative
 RETURN
 PROC LABEL Floor
 RETURN
 PROC LABEL Round_0
  PROC LABEL RealToInt
 RETURN
 PROC LABEL RGreaterThan
 RETURN
 PROC LABEL RealIsPositive
 RETURN
 PROC LABEL RGreaterThanOrEqualTo
 RETURN
 PROC LABEL WriteString
 RETURN
 PROC LABEL StringAsAddress
 RETURN
 PROC LABEL WriteBool
 RETURN
