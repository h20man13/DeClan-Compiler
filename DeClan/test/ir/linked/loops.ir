SYMBOL SECTION
 ENTRY f38 INTERNAL PARAM n INeg 0
 ENTRY f41 INTERNAL RETURN INeg
 ENTRY f62 INTERNAL PARAM dividend Div 0
 ENTRY f64 INTERNAL PARAM divisor Div 1
 ENTRY f72 INTERNAL RETURN Mod
DATA SECTION
BSS SECTION
 DEF GLOBAL f24 := 0 <INT>
CODE SECTION
 DEF f25 := 1 <INT>
 GLOBAL f24 := f25 <INT>
 DEF f26 := 10 <INT>
 LABEL FORBEG_0_LEVEL_0
 IF (GLOBAL f24) LT f26
 THEN FORLOOP_0_LEVEL_0
 ELSE FOREND_0_LEVEL_0
 LABEL FORLOOP_0_LEVEL_0
 CALL WriteInt([(GLOBAL f24) -> f28]<INT>)
 DEF f29 := 1 <INT>
 GLOBAL f24 := (GLOBAL f24) IADD f29 <INT>
 GOTO FORBEG_0_LEVEL_0
 LABEL FOREND_0_LEVEL_0
 CALL WriteLn()
 DEF f30 := 1 <INT>
 GLOBAL f24 := f30 <INT>
 DEF f31 := 10 <INT>
 LABEL FORBEG_1_LEVEL_0
 IF (GLOBAL f24) LT f31
 THEN FORLOOP_1_LEVEL_0
 ELSE FOREND_1_LEVEL_0
 LABEL FORLOOP_1_LEVEL_0
 CALL WriteInt([(GLOBAL f24) -> f28]<INT>)
 DEF f32 := 2 <INT>
 GLOBAL f24 := (GLOBAL f24) IADD f32 <INT>
 GOTO FORBEG_1_LEVEL_0
 LABEL FOREND_1_LEVEL_0
 CALL WriteLn()
 DEF f33 := 10 <INT>
 GLOBAL f24 := f33 <INT>
 DEF f34 := 1 <INT>
 LABEL FORBEG_2_LEVEL_0
 IF (GLOBAL f24) GT f34
 THEN FORLOOP_2_LEVEL_0
 ELSE FOREND_2_LEVEL_0
 LABEL FORLOOP_2_LEVEL_0
 CALL WriteInt([(GLOBAL f24) -> f28]<INT>)
 DEF f35 := 2 <INT>
 CALL INeg([f35 -> f38]<INT>)
 DEF f42 := (RETURN f41) <INT>
 GLOBAL f24 := (GLOBAL f24) IADD f42 <INT>
 GOTO FORBEG_2_LEVEL_0
 LABEL FOREND_2_LEVEL_0
 CALL WriteLn()
 DEF f43 := 10 <INT>
 GLOBAL f24 := f43 <INT>
 DEF f44 := 1 <INT>
 LABEL FORBEG_3_LEVEL_0
 IF (GLOBAL f24) GT f44
 THEN FORLOOP_3_LEVEL_0
 ELSE FOREND_3_LEVEL_0
 LABEL FORLOOP_3_LEVEL_0
 CALL WriteInt([(GLOBAL f24) -> f28]<INT>)
 DEF f45 := 1 <INT>
 CALL INeg([f45 -> f38]<INT>)
 DEF f46 := (RETURN f41) <INT>
 GLOBAL f24 := (GLOBAL f24) IADD f46 <INT>
 GOTO FORBEG_3_LEVEL_0
 LABEL FOREND_3_LEVEL_0
 CALL WriteLn()
 DEF f47 := 1 <INT>
 GLOBAL f24 := f47 <INT>
 DEF f48 := 10 <INT>
 DEF f49 := (GLOBAL f24) LE f48 <BOOL>
 DEF f50 := TRUE <BOOL>
 IF f49 EQ f50
 THEN WHILESTAT_0_SEQ_0_LEVEL_0_0
 ELSE WHILENEXT_0_SEQ_0_LEVEL_0_0
 LABEL WHILECOND_0_SEQ_0_LEVEL_0_0
 IF f49 EQ f50
 THEN WHILESTAT_0_SEQ_0_LEVEL_0_0
 ELSE WHILEEND_0_LEVEL_0_0
 LABEL WHILESTAT_0_SEQ_0_LEVEL_0_0
 CALL WriteInt([(GLOBAL f24) -> f28]<INT>)
 DEF f51 := 1 <INT>
 DEF f52 := (GLOBAL f24) IADD f51 <INT>
 GLOBAL f24 := f52 <INT>
 DEF f53 := 10 <INT>
 DEF f54 := (GLOBAL f24) LE f53 <BOOL>
 f49 := f54 <BOOL>
 GOTO WHILECOND_0_SEQ_0_LEVEL_0_0
 LABEL WHILENEXT_0_SEQ_0_LEVEL_0_0
 LABEL WHILEEND_0_LEVEL_0_0
 CALL WriteLn()
 DEF f55 := 1 <INT>
 GLOBAL f24 := f55 <INT>
 DEF f56 := 10 <INT>
 DEF f57 := (GLOBAL f24) LE f56 <BOOL>
 DEF f58 := 2 <INT>
 CALL Mod([(GLOBAL f24) -> f73]<INT>, [f58 -> f74]<INT>)
 DEF f75 := (RETURN f72) <INT>
 DEF f76 := 1 <INT>
 DEF f77 := f75 EQ f76 <BOOL>
 DEF f78 := f57 LAND f77 <BOOL>
 DEF f79 := TRUE <BOOL>
 IF f78 EQ f79
 THEN WHILESTAT_2_SEQ_0_LEVEL_0_0
 ELSE WHILENEXT_2_SEQ_0_LEVEL_0_0
 LABEL WHILECOND_2_SEQ_0_LEVEL_0_0
 IF f78 EQ f79
 THEN WHILESTAT_2_SEQ_0_LEVEL_0_0
 ELSE WHILEEND_2_LEVEL_0_0
 LABEL WHILESTAT_2_SEQ_0_LEVEL_0_0
 CALL WriteInt([(GLOBAL f24) -> f28]<INT>)
 DEF f80 := 1 <INT>
 DEF f81 := (GLOBAL f24) IADD f80 <INT>
 GLOBAL f24 := f81 <INT>
 DEF f82 := 10 <INT>
 DEF f83 := (GLOBAL f24) LE f82 <BOOL>
 DEF f84 := 2 <INT>
 CALL Mod([(GLOBAL f24) -> f73]<INT>, [f84 -> f74]<INT>)
 DEF f85 := (RETURN f72) <INT>
 DEF f86 := 1 <INT>
 DEF f87 := f85 EQ f86 <BOOL>
 DEF f88 := f83 LAND f87 <BOOL>
 f78 := f88 <BOOL>
 GOTO WHILECOND_2_SEQ_0_LEVEL_0_0
 LABEL WHILENEXT_2_SEQ_0_LEVEL_0_0
 DEF f89 := 10 <INT>
 DEF f90 := (GLOBAL f24) LE f89 <BOOL>
 DEF f91 := TRUE <BOOL>
 IF f90 EQ f91
 THEN WHILESTAT_2_SEQ_1_LEVEL_0
 ELSE WHILENEXT_2_SEQ_1_LEVEL_0
 LABEL WHILECOND_2_SEQ_1_LEVEL_0
 IF f90 EQ f91
 THEN WHILESTAT_2_SEQ_1_LEVEL_0
 ELSE WHILEEND_2_LEVEL_0_0
 LABEL WHILESTAT_2_SEQ_1_LEVEL_0
 DEF f92 := 1 <INT>
 DEF f93 := (GLOBAL f24) IADD f92 <INT>
 GLOBAL f24 := f93 <INT>
 DEF f94 := 10 <INT>
 DEF f95 := (GLOBAL f24) LE f94 <BOOL>
 f90 := f95 <BOOL>
 GOTO WHILECOND_2_SEQ_1_LEVEL_0
 LABEL WHILENEXT_2_SEQ_1_LEVEL_0
 LABEL WHILEEND_2_LEVEL_0_0
 CALL WriteLn()
 DEF f96 := 10 <INT>
 GLOBAL f24 := f96 <INT>
 DEF f97 := 1 <INT>
 DEF f98 := (GLOBAL f24) LT f97 <BOOL>
 DEF f99 := TRUE <BOOL>
 LABEL REPEATBEG_0_LEVEL_0
 IF f98 EQ f99
 THEN REPEATEND_0_LEVEL_0
 ELSE REPEATLOOP_0_LEVEL_0
 LABEL REPEATLOOP_0_LEVEL_0
 CALL WriteInt([(GLOBAL f24) -> f28]<INT>)
 DEF g10 := 2 <INT>
 DEF g11 := (GLOBAL f24) ISUB g10 <INT>
 GLOBAL f24 := g11 <INT>
 DEF g12 := 1 <INT>
 DEF g13 := (GLOBAL f24) LT g12 <BOOL>
 f98 := g13 <BOOL>
 GOTO REPEATBEG_0_LEVEL_0
 LABEL REPEATEND_0_LEVEL_0
 CALL WriteLn()
 DEF g14 := 10 <INT>
 GLOBAL f24 := g14 <INT>
 DEF g15 := 1 <INT>
 DEF g16 := (GLOBAL f24) GE g15 <BOOL>
 DEF g17 := TRUE <BOOL>
 LABEL REPEATBEG_1_LEVEL_0
 IF g16 EQ g17
 THEN REPEATEND_1_LEVEL_0
 ELSE REPEATLOOP_1_LEVEL_0
 LABEL REPEATLOOP_1_LEVEL_0
 CALL WriteInt([(GLOBAL f24) -> f28]<INT>)
 DEF g18 := 1 <INT>
 DEF g19 := (GLOBAL f24) IADD g18 <INT>
 GLOBAL f24 := g19 <INT>
 DEF g20 := 1 <INT>
 DEF g21 := (GLOBAL f24) GE g20 <BOOL>
 g16 := g21 <BOOL>
 GOTO REPEATBEG_1_LEVEL_0
 LABEL REPEATEND_1_LEVEL_0
 CALL WriteLn()
END
PROC SECTION
 PROC LABEL WriteInt
  DEF f27 := 0 <INT>
  IPARAM f27
  IASM "MOV %r, R0"
  IPARAM (PARAM f28)
  IASM "LDR R0, %a"
  IASM "SWI 1"
  IPARAM f27
  IASM "MOV R0, %r"
 RETURN
 PROC LABEL WriteLn
  IASM "SWI 4"
 RETURN
 PROC LABEL INeg
  DEF f36 := 0 <INT>
  DEF f37 := INOT (PARAM f38) <INT>
  DEF f39 := 1 <INT>
  DEF f40 := f37 IADD f39 <INT>
  f36 := f40 <INT>
  DEF RETURN f41 := f36 <INT>
 RETURN
 PROC LABEL Mod
  DEF f59 := 0 <INT>
  DEF f60 := 0 <INT>
  f61 := (PARAM f62) <INT>
  DEF f63 := f61 ISUB (PARAM f64) <INT>
  DEF f65 := 0 <INT>
  DEF f66 := f63 GE f65 <BOOL>
  DEF f67 := TRUE <BOOL>
  IF f66 EQ f67
  THEN WHILESTAT_4_SEQ_0_LEVEL_0_0
  ELSE WHILENEXT_4_SEQ_0_LEVEL_0_0
  LABEL WHILECOND_4_SEQ_0_LEVEL_0_0
  IF f66 EQ f67
  THEN WHILESTAT_4_SEQ_0_LEVEL_0_0
  ELSE WHILEEND_4_LEVEL_0_0
  LABEL WHILESTAT_4_SEQ_0_LEVEL_0_0
  DEF f68 := f61 ISUB (PARAM f64) <INT>
  f61 := f68 <INT>
  DEF f69 := f61 ISUB (PARAM f64) <INT>
  DEF f70 := 0 <INT>
  DEF f71 := f69 GE f70 <BOOL>
  f66 := f71 <BOOL>
  GOTO WHILECOND_4_SEQ_0_LEVEL_0_0
  LABEL WHILENEXT_4_SEQ_0_LEVEL_0_0
  LABEL WHILEEND_4_LEVEL_0_0
  DEF RETURN f72 := f61 <INT>
 RETURN
