PROCEDURE WriteLn();
    BEGIN
		asm("SWI 4");
    END WriteLn;

PROCEDURE WriteString(s: STRING);
    VAR addressHolder: INTEGER; offsetHolder: INTEGER; valueHolder: INTEGER; tempHolder: INTEGER;
    BEGIN
	addressHolder := StringAsAddress(s);
	offsetHolder := 0;
	asm("LDRB %r, [%r, +%r]": valueHolder, addressHolder, offsetHolder);
	asm("STR %r, %a": valueHolder, valueHolder);
	WHILE(~IntIsZero(valueHolder)) DO
	   asm("MOV %r, R0": tempHolder);
	   asm("MOV R0, %r": valueHolder);
	   asm("SWI 6");
	   offsetHolder := offsetHolder + 1;
	   asm("LDRB %r, [%r, +%r]": valueHolder, addressHolder, offsetHolder);
	   asm("STR %r, %a": valueHolder, valueHolder);
	   asm("MOV R0, %r": tempHolder)
	END
    END WriteString;

PROCEDURE WriteInt(i: INTEGER);
	VAR tempReg: INTEGER;
    BEGIN
		asm("MOV %r, R0": tempReg);
		asm("LDR R0, %a": i);
		asm("SWI 1");
		asm("MOV R0, %r": tempReg)
    END WriteInt;

PROCEDURE WriteReal(r: REAL);
	VAR tempReg: INTEGER;
    BEGIN
		asm("MOV %r, R0": tempReg);
		asm("LDR R0, %a": r);
		asm("SWI 2");
		asm("MOV R0, %r": tempReg)
    END WriteReal;

PROCEDURE WriteBool(b: BOOLEAN);
	VAR tempReg: INTEGER;
    BEGIN
		asm("MOV %r, R0": tempReg);
		asm("LDRB R0, %a": b);
		asm("SWI 6");
		asm("MOV R0, %r": tempReg)
	END WriteBool;

PROCEDURE ReadInt();
    VAR result: INTEGER; tempReg: INTEGER;
    BEGIN
		asm("MOV %r, R0": tempReg);
		asm("SWI 3");
		asm("STR R0, %a": result);
		asm("MOV R0, %r": tempReg)
		RETURN result
    END ReadInt;

PROCEDURE ReadReal();
    VAR result: REAL; tempReg: INTEGER;
    BEGIN
		asm("MOV %r, R0": tempReg);
        asm("SWI 5");
        asm("STR R0, %a": result);
		asm("MOV R0, %r": tempReg)
		RETURN result
    END ReadReal;

PROCEDURE ReadBool();
	VAR result: BOOLEAN; tempReg: INTEGER;
	BEGIN
		asm("MOV %r, R0": tempReg);
		asm("SWI 7");
		asm("STRB R0, %a": result);
		asm("MOV R0, %r": tempReg)
		RETURN result
	END ReadBool;