PROCEDURE Abs(n: INTEGER);
    VAR result: INTEGER;
    BEGIN
        IF n >= 0 THEN 
            result := n
        ELSE 
            result := -n
        END
        RETURN result
    END Abs;
PROCEDURE RAbs(n: REAL);
    VAR result: REAL; intResult: INTEGER; signBit: BOOLEAN;
    BEGIN
	signBit := RealIsNegative(n);
	IF signBit THEN
	    result := RNeg(n)
	END
	RETURN result
    END RAbs;
PROCEDURE RealExp(n: REAL; exp: INTEGER);
    VAR result: REAL; count: INTEGER;
    BEGIN
	result := 1;
	count := 0;
	IF exp > 0 THEN
	   WHILE(count < exp) DO
	      result := result * n;
	      count := count + 1
	   END
        ELSIF exp < 0 THEN
	   WHILE(count > exp) DO
	      result := result / n;
	      count := count - 1
	   END
	END;
	RETURN result
    END RealExp;
PROCEDURE IntExp(n: INTEGER; exp: INTEGER);
    VAR result :INTEGER; count :REAL;
    BEGIN
        result := 1;
	count := 0;
        WHILE(count < exp) DO
	    result := result * n;
	    count := count + 1
	END
	RETURN result
    END IntExp;
PROCEDURE Floor(n: REAL);
    VAR result: INTEGER;
    BEGIN
	result := RealToInt(n);
	RETURN result
    END Floor;
PROCEDURE Round(n: REAL);
    VAR result: INTEGER; additionResult: REAL;
    BEGIN
        IF RealIsNegative(n) THEN
            additionResult := n - 0.5;
        ELSE
            additionResult := n + 0.5;
        END;
        result := Floor(additionResult);
    	RETURN result
    END Round;
PROCEDURE Ceil(n: REAL);
    VAR result: INTEGER;
    BEGIN
	result := Floor(n) + 1;
	RETURN result
    END Ceil;



    

