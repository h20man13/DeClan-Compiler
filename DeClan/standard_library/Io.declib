PROCEDURE WriteLn();
    BEGIN
	asm("SWI 4");
    END WriteLn;
PROCEDURE WriteString(s: STRING);
    VAR addressHolder: INTEGER; offsetHolder: INTEGER; valueHolder: INTEGER;
    BEGIN
	addressHolder := StringAsAddress(s);
	offsetHolder := 0;
	asm("LDRB %r, [%r, +%r]": valueHolder, addressHolder, offsetHolder);
	asm("STR %r, %a": valueHolder, valueHolder);
	WHILE(~IntIsZero(valueHolder)) DO
	   asm("MOV R0, %r": valueHolder);
	   asm("SWI 6");
	   offsetHolder := offsetHolder + 1;
	   asm("LDRB %r, [%r, +%r]": valueHolder, addressHolder, offsetHolder);
	   asm("STR %r, %a": valueHolder, valueHolder);
	END
    END WriteString;

PROCEDURE WriteInt(i: INTEGER);
    BEGIN
	asm("LDR R0, %a": i);
	asm("SWI 1");
    END WriteInt;

PROCEDURE WriteReal(r: REAL);
    BEGIN
	asm("LDR R0, %a": r);
	asm("SWI 2");
    END WriteReal;

PROCEDURE ReadInt();
    VAR result: INTEGER;
    BEGIN
	asm("SWI 3");
	asm("STR R0, %a": result);
	RETURN result
    END ReadInt;

PROCEDURE ReadReal();
    VAR result: REAL;
    BEGIN
        asm("SWI 5");
        asm("STR R0, %a": result)
	RETURN result
    END ReadReal;